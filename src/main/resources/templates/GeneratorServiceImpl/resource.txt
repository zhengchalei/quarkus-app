package {data.modulePath}.resource;

import io.github.zhengchalei.common.model.Page;
import {data.entityPath}.{data.entityName};
import {data.modulePath}.service.{data.entityName}Service;

import javax.inject.Inject;
import javax.validation.Valid;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.net.URI;
import java.util.List;

/**
 * @author <a href="mailto:stone981023@gmail.com">zhengchalei</a>
 **/
@Path("/api/{data.module}/{data.removedPrefixName}")
public class {data.entityName}Resource {

    private static final String PATH = "/api/{data.module}/{data.removedPrefixName}";

    @Inject
    {data.entityName}Service service;

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public List<{data.entityName}> page(@BeanParam Page page, @BeanParam {data.entityName} {data.lowerCaseEntityName}) {
        return service.findPage(page.build(), {data.lowerCaseEntityName});
    }

    {#if data.tree}
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Path("/search/tree")
    public List<{data.entityName}> tree() {
        return service.tree();
    }
    {/if}

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Path("/search/list")
    public List<{data.entityName}> list(@BeanParam {data.entityName} {data.lowerCaseEntityName}) {
        return service.findList({data.lowerCaseEntityName});
    }

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Path("/\{id\}")
    public {data.entityName} findById(@PathParam("id") Long id) {
        return service.findById(id);
    }

    @POST
    @Produces(MediaType.APPLICATION_JSON)
    public Response save(@Valid {data.entityName} {data.lowerCaseEntityName}) {
        service.save({data.lowerCaseEntityName});
        return Response.created(URI.create(PATH + {data.lowerCaseEntityName}.id)).build();
    }

    @PUT
    @Produces(MediaType.APPLICATION_JSON)
    @Path("/\{id\}")
    public Response update(@Valid {data.entityName} {data.lowerCaseEntityName}, @PathParam("id") Long id) {
        service.update(id, {data.lowerCaseEntityName});
        return Response.ok().build();
    }

    @DELETE
    @Path("/\{id\}")
    public Response delete(@PathParam("id") Long id) {
        if (service.delete(id)) {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
        return Response.ok().build();
    }
}
