package {data.modulePath}.service.impl;

import io.github.zhengchalei.common.jpa.QueryBuilder;
import io.github.zhengchalei.common.Util;
import {data.entityPath}.{data.entityName};
import {data.modulePath}.service.{data.entityName}Service;
import io.quarkus.panache.common.Page;
import org.apache.commons.lang3.StringUtils;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.persistence.EntityManager;
import javax.persistence.criteria.Predicate;
import javax.transaction.Transactional;
import javax.ws.rs.NotFoundException;
import java.util.List;

/**
 * @author <a href="mailto:stone981023@gmail.com">zhengchalei</a>
 **/
@Singleton
@Transactional
public class {data.entityName}ServiceImpl implements {data.entityName}Service {

    @Inject
    EntityManager entityManager;

    private QueryBuilder<{data.entityName}> queryBuilder({data.entityName} {data.lowerCaseEntityName}) {
        QueryBuilder<{data.entityName}> queryBuilder = new QueryBuilder<>(entityManager, {data.entityName}.class);
        if ({data.lowerCaseEntityName}.id != null) {
            Predicate predicate = queryBuilder.cb.equal(
                    queryBuilder.root.get("id"),
                    {data.lowerCaseEntityName}.id
            );
            queryBuilder.where(predicate);
        }
        return queryBuilder;
    }

    @Override
    public List<{data.entityName}> findPage(Page page, {data.entityName} {data.lowerCaseEntityName}) {
        return {data.entityName}.findAll().page(page).list();
    }

    @Override
    public long findCount(Page page, {data.entityName} {data.lowerCaseEntityName}) {
        return {data.entityName}.findAll().page(page).count();
    }

    @Override
    public List<{data.entityName}> findAll({data.entityName} {data.lowerCaseEntityName}) {
        QueryBuilder<{data.entityName}> queryBuilder = this.queryBuilder({data.lowerCaseEntityName});
        return queryBuilder.exec().getResultList();
    }

    {#if data.tree}
    @Override
    public List<{data.entityName}> tree() {
        List<{data.entityName}> listAll = {data.entityName}.listAll();
        return Util.tree(listAll);
    }
    {/if}

    @Override
    public {data.entityName} findById(Long id) {
        {data.entityName} data = {data.entityName}.findById(id);
        if (data == null) {
            throw new NotFoundException();
        }
        return data;
    }

    @Override
    public void save({data.entityName} {data.lowerCaseEntityName}) {
        {data.lowerCaseEntityName}.persistAndFlush();
    }

    @Override
    public void update(Long id, {data.entityName} {data.lowerCaseEntityName}) {
        {data.entityName} flush = findById(id);
        // change
        flush.persistAndFlush();
    }

    @Override
    public boolean delete(Long id) {
        return {data.entityName}.deleteById(id);
    }
}
